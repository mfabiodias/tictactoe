{"version":3,"sources":["helpers/index.js","App.js","index.js"],"names":["getWinner","winner","currentPlayer","robo","App","boardData","Array","fill","player","robot","useState","board","setBoard","Number","indexOf","setCurrentPlayer","setWinner","level","setLevel","users","setUsers","host","port","updateGameUser","name","axios","put","then","res","data","handleClick","idx","map","e","i","autoGame","sugestion","machine","human","options","machineNextOptions","humanNextOptions","winModel","forEach","v","push","machineOptions","filter","machineOption","x","includes","length","winOption","humanOptions","humanOption","console","log","parseInt","flat","Math","floor","random","getSugestion","restartGame","useEffect","get","winCheck","cells","every","cell","option","className","onChange","target","value","defaultValue","user","score","item","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebddfdf5.chunk.js","sourcesContent":["export const getWinner = (winner, currentPlayer, robo) => {\n    if(!winner) {\n        return currentPlayer === robo ? \"É a vez da máquina!\" : \"É a sua vez!\";\n    } else {\n        return winner !== \"E\" ? `${winner === robo ? \"Máquina\" : \"Você\" } venceu!` : `Empatou!`;\n    }\n} \n\nexport const winCheck = (board) => [\n    // Horizontal\n    [board[0], board[1], board[2]],\n    [board[3], board[4], board[5]],\n    [board[6], board[7], board[8]],\n\n    // Vertical\n    [board[0], board[3], board[6]],\n    [board[1], board[4], board[7]],\n    [board[2], board[5], board[8]],\n\n    // Transversal\n    [board[2], board[4], board[6]],\n    [board[0], board[4], board[8]],\n];\n\nexport const getSugestion = (board, level) => {\n    const machine = [];\n    const human   = [];\n    const options = [];\n\n    const machineNextOptions = { \"1\": [], \"2\": [], \"3\": [] };\n    const humanNextOptions   = { \"1\": [], \"2\": [], \"3\": [] };\n\n    const winModel = [\n        [0,1,2], [3,4,5], [6,7,8], // Horizontal\n        [0,3,6], [1,4,7], [2,5,8], // Vertical\n        [2,4,6], [0,4,8] // Transversal\n    ];\n\n    board.forEach((v,i) => {\n        if(v === 'O') human.push(i)\n        else if(v === 'X') machine.push(i)\n        else if(v === '') options.push(i)\n    });\n\n    // Máquina\n    let machineOptions = winModel.filter((machineOption, i) => {\n      return !(machineOption.filter(x => human.includes(x))).length\n    });\n\n    machineOptions = machineOptions.map((winOption,i) => {\n        return winOption.filter(x => options.includes(x));\n    });\n\n    machineOptions.forEach(options => {\n      if(!!options.length) machineNextOptions[options.length].push(options)\n    });\n\n    // Humano\n    let humanOptions = winModel.filter((humanOption, i) => {\n      return !(humanOption.filter(x => machine.includes(x))).length\n    });\n\n    humanOptions = humanOptions.map((winOption,i) => {\n        return winOption.filter(x => options.includes(x));\n    });\n\n    humanOptions.forEach(options => {\n      if(!!options.length) humanNextOptions[options.length].push(options);\n    });\n\n    if(!!humanNextOptions[1].length) machineNextOptions[1] = humanNextOptions[1];\n\n    console.log(`Level ${level} ativo!`)\n\n    let sugestion;\n    if(parseInt(level) === 1) {\n      sugestion = options;\n    } else if(parseInt(level) === 2) {\n      sugestion = \n        !!machineNextOptions[1].length ? machineNextOptions[1].flat(1) : \n        !!machineNextOptions[2].length ? machineNextOptions[2].flat(1) : \n        !!machineNextOptions[3].length ? machineNextOptions[3].flat(1) : options;\n    } else {\n      sugestion = \n        !machine.includes(4) && !human.includes(4) ? [4] :\n        !!machineNextOptions[1].length ? machineNextOptions[1].flat(1) : \n        !!machineNextOptions[2].length ? machineNextOptions[2].flat(1) : \n        !!machineNextOptions[3].length ? machineNextOptions[3].flat(1) : options;\n    }\n\n    sugestion = sugestion[Math.floor(Math.random()*sugestion.length)]; \n\n    return sugestion;\n}","import React, { useState, useEffect } from 'react';\nimport { getWinner, winCheck, getSugestion} from './helpers';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n\n  const boardData = Array(9).fill(\"\");\n  const player = [\"O\", \"X\"];\n  const robot = \"X\";\n  const [board, setBoard] = useState(boardData);\n  const [currentPlayer, setCurrentPlayer] = useState(player[Number(!player.indexOf(robot))]);\n  const [winner, setWinner] = useState(null);\n  const [level, setLevel] = useState(\"1\");\n  const [users, setUsers] = useState(null);\n  const host = \"http://localhost\";\n  const port = 3001;\n  \n  const getGameData = () => {\n    axios.get(`${host}:${port}/api/users`)\n    .then(res => {\n      setUsers(res.data);\n    })\n  } \n\n  const updateGameUser = (name) => {\n    axios.put(`${host}:${port}/api/user/${name}`)\n    .then(res => {\n      setUsers(res.data);\n    })\n  } \n\n  const resetGameData = () => {\n    axios.get(`${host}:${port}/api/user/reset`)\n    .then(res => {\n      setUsers(res.data);\n    })\n  } \n\n  // Eventos dos jogadores\n  const handleClick = (idx) => {\n    // Vencedor ou Empate\n    if(winner || board[idx] !== \"\") return null;\n\n    // Desenha opção do jogador\n    setBoard(board.map((e, i) => i === idx ? currentPlayer : e ));\n\n    // Alternar a vez do jogador\n    setCurrentPlayer(player[Number(!player.indexOf(currentPlayer))]);\n  }\n\n  // Mudar dificuldade do jogo\n  const handleChange = (e) => {\n    setLevel(e.target.value);\n    restartGame();\n  }\n\n  // Lógica do adversário\n  const autoGame = () => {\n    const sugestion = getSugestion(board, level);\n    handleClick(sugestion);\n  }\n\n  // Reiniciar partida\n  const restartGame = () => {\n    setCurrentPlayer(winner !== \"E\" && !!winner ? winner : player[Number(!player.indexOf(robot))]);\n    setBoard(boardData);\n    setWinner(null);\n  }\n\n  // Lógica do jogo\n  const drawGame = () => {\n\n    if(!users) setUsers(getGameData());\n\n    let winner = \"\";\n    \n    // Checar se existe um vencedor\n    winCheck(board).forEach(cells => {\n      if(cells.every(cell => cell === \"X\")) {\n        winner = \"X\";\n        setWinner(winner);\n        updateGameUser('robot');\n      } else if(cells.every(cell => cell === \"O\")) {\n        winner = \"O\";\n        updateGameUser('user');\n        setWinner(winner);\n      }\n    });\n    \n    // Verifica se existe um empate ou realiza jogada do robo\n    if(!winner) {\n      if(board.every(option => option !== \"\")) {\n        setWinner(\"E\");\n      } else if(currentPlayer === robot) {\n        autoGame();\n      }\n    }\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(drawGame, [board, currentPlayer]);\n\n\n  return (\n    <>\n      <header>\n        <h1 className=\"title\">Jogo da Velha</h1>\n        <select className=\"custom-select\" onChange={handleChange} defaultValue={level} >\n          <option value=\"1\">Fácil</option>\n          <option value=\"2\">Médio</option>\n          <option value=\"3\">Difícil</option>\n        </select>\n        <div className=\"users\">\n          { !!users &&\n            users.map((user, idx) => <div key={idx}  className={`name ${user.name}`}>{user.name === \"user\" ? \"Você\" : \"Máquina\"}: {user.score}</div> )\n          }\n        </div>\n      </header>\n\n      <main>\n        <div className={`board ${winner ? \"game-over\" : \"\"}`} >\n          {board.map((item,idx) => (\n            <div key={idx} className={`cell ${item}`} onClick={() => handleClick(idx)}>\n              {item}\n            </div>\n          ))}\n        </div>\n      </main>\n      \n      <footer>\n        <h2 className=\"winner-message\">\n          <span className={!winner ? `player ${currentPlayer}` : winner }>\n            {getWinner(winner, currentPlayer, robot)}\n          </span>\n        </h2>\n        {\n          winner && \n          <section className=\"container space-between\">\n            <div className=\"item\"><button className=\"reset-button\" onClick={restartGame}>Recomeçar o Jogo</button></div>\n            <div className=\"item\"><button className=\"reset-game\" onClick={resetGameData}>Zerar pontuação</button></div>\n          </section>\n        }        \n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root') );"],"sourceRoot":""}